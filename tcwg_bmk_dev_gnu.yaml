# Auto generated by ./tcwg/generate-yamlfiles.sh from tcwg_bmk_dev.yaml.in and tcwg_bmk_dev/tcwg_bmk_dev_gnu.def. Do not edit.
#BEGIN: tcwg/round-robin.yaml.inc
# -*- mode: Yaml -*-

#BEGIN: tcwg/default.yaml.inc
# -*- mode: Yaml -*-

- property:
    name: default-properties
    properties:
      - authorization:
          anonymous:
            - job-read
            - job-extended-read
          linaro:
            - job-build
            - job-cancel
      - build-discarder:
          days-to-keep: 30
          num-to-keep: 30

- scm:
    name: jenkins-scripts
    scm:
      - git:
          url: https://git.linaro.org/toolchain/jenkins-scripts.git
          refspec: +refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/*
          branches:
            - $scripts_branch
          basedir: jenkins-scripts
          skip-tag: true
          reference-repo: /home/tcwg-buildslave/snapshots-ref/jenkins-scripts.git
          wipe-workspace: false
          clean:
            before: true
          prune: true

- scm:
    name: bmk-scripts
    scm:
      - git:
          url: https://git.linaro.org/toolchain/bmk-scripts.git
          refspec: +refs/heads/*:refs/remotes/origin/* +refs/changes/*:refs/changes/*
          branches:
            - $bmk_branch
          basedir: bmk-scripts
          skip-tag: true
          reference-repo: /home/tcwg-buildslave/snapshots-ref/bmk-scripts.git
          wipe-workspace: false
          clean:
            before: true
          prune: true
#END:   tcwg/default.yaml.inc

- parameter:
    name: default-parameters
    parameters:
      - string:
          name: ci_project
          default: '{ci_project}'
          description: "CI project ID; used as namespace for git branches and selects benchmarking hardware"
      - string:
          name: ci_config
          default: '{ci_config}'
          description: "CI configuration ID; used as name of git branches and selects build flags"
      - string:
          name: extra_build_params
          default: ""
          description: "Extra parameters to pass to the build script; can be used to override settings extracted from ci_project/ci_config"
      - string:
          name: mail_recipients
          default: first.last@linaro.org
          description: "Comma-separated list of email recipients"
      - string:
          name: distro
          default: '{distro}'
          description: 'Distro image to use'
      - string:
          name: scripts_branch
          default: master
          description: 'Scripts revision to use'
      - string:
          name: bmk_branch
          default: master
          description: 'Benchmark scripts revision to use'

- parameter:
    name: component-parameters
    parameters:
      - string:
          name: '{component}_url'
          default: '{url}'
          description: "{component} git URL"
      - string:
          name: '{component}_branch'
          default: '{branch}'
          description: "{component} branch or sha1 to build, or 'baseline'"

- parameter:
    name: build-parameters
    parameters:
      - component-parameters:
          component: binutils
          url: '{binutils_url}'
          branch: '{default_branch}'
      - component-parameters:
          component: gcc
          url: '{gcc_url}'
          branch: '{default_branch}'
      - component-parameters:
          component: glibc
          url: '{glibc_url}'
          branch: '{default_branch}'
      - choice:
          name: update_baseline
          choices:
            - update
            - reset
            - init
            - push
          description: "What to do with baseline in this build"
      - default-parameters:
          ci_project: '{ci_project}'
          ci_config: '{ci_config}'
          distro: '{distro}'

# Beware: git branch names need the 'refs/heads/' prefix while tags
# need 'refs/tags/'.
- scm:
    name: component-scm
    scm:
        - git:
            url: '{url}'
            branches:
              - '{branch}'
            basedir: '{component}'
            skip-tag: true
            reference-repo: '/home/tcwg-buildslave/snapshots-ref/{reference}'
            wipe-workspace: false
            clean:
              before: true
            prune: true

# SCMs must start with jenkins-scripts and then be ordered alphabetically.
# Same alphabetical order must be followed in .def files.  The reason behind
# this is that jenkins sets $GIT_COMMIT to sha1 of jenkins-scripts, and then
# sets $GIT_COMMIT_1, $GIT_COMMIT_2, etc. to sha1s of component SCM /in the
# order that they are declared here/.
- scm:
    name: build-scms
    scm:
      - jenkins-scripts
      - bmk-scripts

- wrapper:
    name: build-wrappers
    wrappers:
      - timeout:
          timeout: '{timeout}'
      - timestamps
      - ssh-agent-credentials:
          # tcwg-buildslave user id
          users:
            - 'e0958a95-204f-4c14-a66c-5e2be6c5d50a'

- builder:
    name: trigger-followup-builds
    builders:
      - build-name-setter:
          name: 'artifacts/jenkins/build-name'
          file: true
      - conditional-step:
          # Only run if above succeeded
          # (a failed build is indicated by artifacts/failed)
          condition-kind: current-status
          steps:
            - shell: |
                #!/bin/bash
                set -ex
                for i in artifacts/trigger-build-* artifacts/trigger-bisect; do
                  if [ -f $i ]; then
                    echo "ci_project=$ci_project" >> $i
                    echo "ci_config=$ci_config" >> $i
                    echo "mail_recipients=$mail_recipients" >> $i
                    echo "distro=$distro" >> $i
                    echo "scripts_branch=$scripts_branch" >> $i
                    echo "bmk_branch=$bmk_branch" >> $i
                  fi
                done
            - trigger-builds:
                - project: '{rr_project}-build{job_suffix}'
                  parameter-factories:
                    - factory: filebuild
                      file-pattern: artifacts/trigger-build-*
                - project: '{rr_project}-bisect{job_suffix}'
                  property-file: artifacts/trigger-bisect
            - shell:
                command: |
                  #!/bin/bash
                  if [ -f artifacts/failed ]; then
                    exit $(cat artifacts/failed)
                  fi
                unstable-return: 125

- builder:
    name: run-build
    builders:
      - shell:
          command: |
            #!/bin/bash
            set -ex
            # Delete artifacts now to avoid re-using stale artifacts if
            # below docker-run.sh fails to start up a container.
            rm -rf artifacts/
            mkdir -p artifacts/jenkins

            dryruncmd=""

            # Skip SCM-triggered builds if there are other builds in
            # the queue.  We need to process all pending bisection-triggered
            # builds before fetching a new batch of upstream changes.
            if [ x"${BUILD_CAUSE_SCMTRIGGER-false}" = x"true" ]; then
              inQueue=$(curl -s "${JOB_URL}api/xml?tree=inQueue" \
                          | sed -e "s#.*<inQueue>\(.*\)</inQueue>.*#\1#")
              if [ x"$inQueue" = x"true" ]; then
                dryruncmd="echo SKIPPING SCM BUILD:"
                touch artifacts/jenkins/skip-scm-build
              fi
            fi

            build_name="#$BUILD_NUMBER-$ci_project/$ci_config"
            branch_opt=""
            # 1 to skip jenkins-scripts
            i=1
            for c in {components}; do
              eval "u=\$$$${{c}}_url"
              eval "b=\$$$${{c}}_branch"
              if [ x"$b" != x"baseline" ]; then
                build_name="$build_name-$c"
                branch_opt="$branch_opt ==rr[${{c}}_url] $u ==rr[${{c}}_branch] $b"
              fi
            done

            $dryruncmd \
            ./jenkins-scripts/docker-run.sh \
              --distro $distro \
              --ssh_info true \
              -- \
              ./jenkins-scripts/{build_script} \
              %% artifacts/jenkins/manifest.sh \
              ==rr[ci_project] $ci_project \
              ==rr[ci_config] $ci_config \
              $extra_build_params \
              --bmk_branch "$bmk_branch" \
              --scripts_branch "$scripts_branch" \
              $branch_opt \
              ==rr[mode] "jenkins-full" \
              ==rr[update_baseline] "$update_baseline" \
              --BUILD_URL "$BUILD_URL" &
            res=0 && wait $! || res=$?

            if [ $res != 0 ]; then
              echo $res > artifacts/failed
            fi

            if [ -f artifacts/jenkins/skip-scm-build ]; then
              build_name="$build_name-skip-scm-build"
            fi
            if [ -f artifacts/results ]; then
              build_name="$build_name-R$(tail -n1 artifacts/results)"
            fi
            if [ x"$update_baseline" != x"update" ]; then
              build_name="$build_name-$update_baseline"
            fi
            if [ -f artifacts/trigger-bisect ]; then
              build_name="$build_name-trigger-bisect"
            fi
            echo "$build_name" > artifacts/jenkins/build-name

            # If we didn't run the docker command
            if [ -n "$dryruncmd" ]; then
              # Mark build unstable aka a skipped config
              exit 125
            fi
          unstable-return: 125
      - trigger-followup-builds:
          rr_project: '{rr_project}'
          job_suffix: '{job_suffix}'

- publisher:
    name: build-publishers
    publishers:
        - archive:
            artifacts: 'artifacts/**'
            latest-only: false

- parameter:
    name: bisect-parameters
    parameters:
      - string:
          name: current_project
          default: ""
          description: "Project to bisect"
      - string:
          name: bad_url
          default: ""
          description: "Bad git URL"
      - string:
          name: bad_branch
          default: ""
          description: "Bad branch or sha1"
      - file:
          name: jenkins-scripts/replay_log
          description: "Replay part of bisect using provided bisect log"
      - default-parameters:
          ci_project: '{ci_project}'
          ci_config: '{ci_config}'
          distro: '{distro}'

- wrapper:
    name: bisect-wrappers
    wrappers:
      - build-wrappers:
          timeout: '{timeout}'

- builder:
    name: run-bisect
    builders:
      - shell:
          command: |
            #!/bin/bash
            set -ex
            # Delete artifacts now to avoid re-using stale artifacts if
            # below docker-run.sh fails to start up a container.
            rm -rf artifacts/
            mkdir -p artifacts/jenkins
            build_name="#$BUILD_NUMBER-$ci_project/$ci_config-$current_project"
            echo "$build_name" > artifacts/jenkins/build-name
            # artifacts/jenkins/mail-*.txt will be overwritten in successful builds.
            echo "maxim.kuvyrkov@linaro.org" > artifacts/jenkins/mail-recipients.txt
            echo "Build $BUILD_URL failed" > artifacts/jenkins/mail-body.txt

            ./jenkins-scripts/docker-run.sh \
              --distro $distro \
              --ssh_info true \
              -- \
              ./jenkins-scripts/round-robin-bisect.sh \
              %% artifacts/manifests/bisect.sh \
              --BUILD_URL "$BUILD_URL" \
              --current_project "$current_project" \
              --bad_url "$bad_url" \
              --bad_branch "$bad_branch" \
              --replay_log "$(pwd)/jenkins-scripts/replay_log" \
              --build_script "./jenkins-scripts/{build_script}" \
              -- \
              ==rr[ci_project] $ci_project \
              ==rr[ci_config] $ci_config \
              $extra_build_params \
              --bmk_branch "$bmk_branch" \
              --scripts_branch "$scripts_branch" &
            res=0 && wait $! || res=$?

            if [ $res != 0 ]; then
              echo $res > artifacts/failed
            fi

            if [ x"$mail_recipients" != x"default" ]; then
              echo "$mail_recipients" > artifacts/jenkins/mail-recipients.txt
            fi
          unstable-return: 125
      - trigger-followup-builds:
          rr_project: '{rr_project}'
          job_suffix: '{job_suffix}'

- publisher:
    name: bisect-publishers
    publishers:
        - build-publishers
        - email-ext:
            # Strangely, we no longer need to double-{ ${FILE} macro in
            # recipients and body sections.  They appear to bypass
            # job-template expansion.
            recipients: |
              ${FILE,path="artifacts/jenkins/mail-recipients.txt"}
            content-type: text
            body: |
              ${FILE,path="artifacts/jenkins/mail-body.txt"}
            failure: true
            success: true
            aborted: true
            send-to:
              - recipients
#END:   tcwg/round-robin.yaml.inc

- project:
    name: tcwg_bmk_dev_gnu
    jobs:
      - 'tcwg_bmk_dev_gnu-build'
      - 'tcwg_bmk_dev_gnu-bisect'

- view:
    name: tcwg_bmk_dev_gnu
    view-type: list
    job-name:
      - tcwg_bmk_dev_gnu-build
      - tcwg_bmk_dev_gnu-bisect
      - tcwg-benchmark
      - tcwg-benchmark-backend

- job-template:
    name: tcwg_bmk_dev_gnu-build
    project-type: freestyle
    defaults: global
    properties:
      - default-properties
      - build-blocker:
          blocking-jobs:
            - "tcwg_bmk_dev_gnu-bisect"
          queue-scanning: 'ALL'
    parameters:
      - build-parameters:
          ci_project: 'tcwg_bmk_NAME_gnu_HW'
          ci_config: gnu-master-aarch64-spec2k6-O2
          binutils_url: https://git.linaro.org/toolchain/ci/binutils-gdb.git
          gcc_url: https://git.linaro.org/toolchain/ci/gcc.git
          glibc_url: https://git.linaro.org/toolchain/ci/glibc.git
          default_branch: baseline
          distro: lts_1
    disabled: false
    node: tcwg-x86_64-build
    concurrent: false
    display-name: 'TCWG Build tcwg_bmk_dev_gnu'
    workspace: workspace/tcwg_bmk_$EXECUTOR_NUMBER
    scm:
      - build-scms
    wrappers:
      - build-wrappers:
          timeout: 600
    builders:
      - run-build:
          build_script: 'tcwg_bmk-build.sh'
          components: binutils gcc glibc
          rr_project: 'tcwg_bmk_dev_gnu'
          job_suffix: ''
    publishers:
        - build-publishers

- job-template:
    name: tcwg_bmk_dev_gnu-bisect
    project-type: freestyle
    defaults: global
    properties:
      - default-properties
    parameters:
      - bisect-parameters:
          ci_project: 'tcwg_bmk_NAME_gnu_HW'
          ci_config: gnu-master-aarch64-spec2k6-O2
          distro: lts_1
    disabled: false
    node: tcwg-x86_64-build
    concurrent: false
    display-name: 'TCWG Bisect tcwg_bmk_dev_gnu'
    workspace: workspace/tcwg_bmk_$EXECUTOR_NUMBER
    scm:
      - jenkins-scripts
      - bmk-scripts
    wrappers:
      - bisect-wrappers:
          timeout: 2880
    builders:
      - run-bisect:
          build_script: 'tcwg_bmk-build.sh'
          components: binutils gcc glibc
          rr_project: 'tcwg_bmk_dev_gnu'
          job_suffix: ''
    publishers:
        - bisect-publishers
# checksum: 467da1be18267fbe3e4f5fc05d25e54d
